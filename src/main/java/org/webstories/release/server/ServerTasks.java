package org.webstories.release.server;

import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.webstories.release.ProjectVersion;

public class ServerTasks {
	private Path jbossHome;
	private ProjectVersion version;
	
	private ServerTasks( Path jbossHome, ProjectVersion version ) {
		this.jbossHome = jbossHome;
		this.version = version;
	}
	
	public static ServerTasks create( Path jbossHome, ProjectVersion version ) {
		return new ServerTasks( jbossHome, version );
	}
	
	/**
	 * Check if the artifact generated by the last build process is already deployed in the server
	 */
	public boolean isDeployed() throws DeploymentException {
		Path targetWAR = null;
		
		try {
			try (
				DirectoryStream<Path> items = Files.newDirectoryStream( Paths.get( "target" ) )
			) {
				Path targetPrefix = Paths.get( "WebStories-" + version.toString() );
				for ( Path item : items ) {
					Path filename = item.getFileName();
					if ( filename.startsWith( targetPrefix ) ) {
						targetWAR = filename;
					}
				}
			}
		} catch ( IOException e ) {
			throw new DeploymentException( e );
		}
		
		if ( targetWAR == null ) {
			throw new DeploymentException(
				"Failed to find the '.war' file to deploy inside the 'target' directory"
			);
		}
		
		Path deployments = jbossHome.resolve( "standalone/deployments/" );
		Path deployedFile = deployments.resolve( targetWAR );
		
		return Files.exists( deployedFile );
	}
	
	/**
	 * Deploy the artifact generated by the last build process, stopping or restarting the server
	 * if necessary.
	 */
	public void deploy() throws DeploymentException {
		if ( isDeployed() ) {
			throw new DeploymentException( "The project is already deployed" );
		}
	}
}
