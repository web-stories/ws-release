package org.webstories.release.server;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.apache.commons.io.FileUtils;
import org.webstories.release.utils.Logger;
import org.webstories.release.utils.PathUtils;
import org.webstories.release.utils.SocketUtils;

import com.fagnerbrack.release.ProjectVersion;
import com.fagnerbrack.release.command.AsyncCommand;
import com.fagnerbrack.release.command.CommandException;
import com.fagnerbrack.release.command.SyncCommand;
import com.fagnerbrack.release.server.DeploymentException;
import com.fagnerbrack.release.server.ServerTasks;

public class JBossServerTasks implements ServerTasks {
	private Path jbossHome;
	private ProjectVersion version;
	
	private JBossServerTasks( Path jbossHome, ProjectVersion version ) {
		this.jbossHome = jbossHome;
		this.version = version;
	}
	
	public static JBossServerTasks create( Path jbossHome, ProjectVersion version ) {
		return new JBossServerTasks( jbossHome, version );
	}
	
	/**
	 * Deploy the artifact generated by the last build process, stopping or restarting the server
	 * if necessary.
	 */
	@Override
	public void deploy() throws DeploymentException {
		String prefix = "WebStories-" + version;
		Path directory = Paths.get( "target" );
		Path artifactPath = null;
		
		try {
			artifactPath = PathUtils.getFileThatStartsWith( prefix, directory );
		} catch ( IOException e ) {
			throw new DeploymentException( e );
		}
		
		if ( artifactPath == null ) {
			throw new DeploymentException(
				"Failed to find the '.war' file to deploy inside the 'target' directory"
			);
		}
		
		Path deploymentsDir = jbossHome.resolve( "standalone/deployments/" );
		Path binDir = jbossHome.resolve( "bin" );
		Path deploymentTarget = deploymentsDir.resolve( artifactPath.getFileName() );
		boolean serverUp = !SocketUtils.isPortAvailable( 80 );
		boolean alreadyDeployed = Files.exists( deploymentTarget );
		
		Logger.task( "Checking if server is up: " + serverUp );
		Logger.task( "Checking if deployment exists: " + alreadyDeployed + "(" + deploymentTarget.toAbsolutePath() + ")" );
		
		if ( serverUp && alreadyDeployed ) {
			Logger.task( "The artifact '" + deploymentTarget + "' is already deployed and server is up" );
			return;
		}
		
		if ( serverUp ) {
			try {
				File cwd = binDir.toFile();
				SyncCommand jbossCli = new SyncCommand( "jboss-cli.sh", cwd );
				jbossCli.addEnv( "NOPAUSE", "true" );
				jbossCli.execute( "--connect", "command=:shutdown" );
			} catch ( CommandException e ) {
				throw new DeploymentException( e );
			}
		}
		
		try {
			Logger.task( "Cleaning directory: " + deploymentsDir.toAbsolutePath() );
			FileUtils.cleanDirectory( deploymentsDir.toFile() );
			Logger.task( "Copying generated artifact: " + artifactPath.toAbsolutePath() );
			Files.copy( artifactPath, deploymentTarget );
		} catch ( IOException e ) {
			throw new DeploymentException( e );
		}
		
		try {
			File cwd = binDir.toFile();
			AsyncCommand standalone = new AsyncCommand( "standalone.sh", cwd );
			standalone.execute( "-b", "0.0.0.0" );
		} catch ( CommandException e ) {
			throw new DeploymentException( e );
		}
	}
}
